if $SHELL =~ 'bin/fish'

	set shell=/bin/sh
endif

set nocompatible              " be iMproved, required
filetype off                  " required

set number                     " Show current line number

set relativenumber             " Show relative line numbers
set t_Co=256

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

set backspace=2 " make backspace work like most other apps

" macvim
set guioptions-=L
set guioptions-=r

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" file tree
Plugin 'scrooloose/nerdtree.git'

" easy motion
Plugin 'easymotion/vim-easymotion'

" color schemes
Plugin 'flazz/vim-colorschemes'

" footer
Plugin 'bling/vim-airline'

" surround extension
Plugin 'tpope/vim-surround'

" swift syntax highlightning
Plugin 'keith/swift.vim'

" comment in/out
Plugin 'scrooloose/nerdcommenter'

Plugin 'jistr/vim-nerdtree-tabs'

" File search
Plugin 'ctrlpvim/ctrlp.vim'

" Syntax checking
Plugin 'scrooloose/syntastic'

Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'

" graphql highlightning and indentation
Plugin 'jparise/vim-graphql'

" markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

call vundle#end()            " required
filetype plugin indent on    " required

" leader
map <Space> <Leader>

" map easy motion prefix to <Leader><Leader>
map <Leader><Space> <Plug>(easymotion-prefix)
map <Leader><Space>f <Plug>(easymotion-bd-f)

" mappings
map <C-n> :NERDTreeToggle<CR>
map <A-BS> db
map <C-t> :Files<CR>

nmap ,n :NERDTreeFind<CR>
nmap ,m :NERDTreeToggle<CR>

" copy paragraph an past it again below
noremap cp yap<S-}>p

" Quickly align your current paragraph with this command
noremap <leader>a =ip

" hit qq to record, q to stop recording, and Q to apply.
nnoremap Q @q
nnoremap Q :norm @q<CR>

" write and quickly close a file
noremap <leader>q :q<cr>
nnoremap <leader>s :w<cr>
inoremap <leader>s <C-c>:w<cr>

" replaces the word under cursor for whatever you want
" foo that, you can keep pressing .
" and it will keep substituting all the instances of the original word
nnoremap <Leader>x *``cgn
nnoremap <Leader>X #``cgN

" search and replace
noremap ;; :%s:::g<Left><Left><Left>

" delete without yanking
nnoremap <leader>d "_d
xnoremap <leader>d "_d
" replace currently selected text with default register
" without yanking it
xnoremap <leader>p "_dP

" split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" tabs
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tt :tabedit<Space>
nnoremap tn :tabnew<CR>
nnoremap td :tabclose<CR>
nnoremap tm :tabm<Space>

cnoremap w!! w !sudo tee > /dev/null %

" theme
syntax enable
set background=dark
"colorscheme solarized
let g:solarized_termcolors=256
colorscheme Tomorrow-Night-Eighties
" colorscheme Tomorrow


" tab bar
hi TabLineFill term=bold cterm=bold ctermbg=0

set clipboard=unnamed

set laststatus=2
let g:airline_powerline_fonts = 1

set pastetoggle=<F2>

" indent
au Filetype html setlocal ts=2 sts=2 sw=2 noet
au Filetype js setlocal ts=2 sw=2 noet
au Filetype json setlocal ts=2 sts=2 sw=2 noet
au FileType python setl ts=4 sts=4 sw=4 noet
au FileType swift setl ts=2 sts=2 sw=2 noet
au FileType groovy setl ts=2 sts=2 sw=2 expandtab
au FileType yml setl ts=2 sts=2 sw=2 noet

au BufRead,BufNewFile Podfile,Fastfile,*.podspec set filetype=ruby
au BufRead,BufNewFile Jenkinsfile set filetype=groovy

au FileType make setl ts=2 sts=2 sw=2 noet

" macvim
set gfn=Ubuntu\ Mono\ derivative\ Powerline:h16
set linespace=2

" ycm
let g:ycm_path_to_python_interpreter = '/Users/micha/.pyenv/shims/python'

" hide files in nerdtree
let NERDTreeIgnore = ['\.pyc$']

let g:nerdtree_tabs_open_on_gui_startup=0

" vim-markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0

" Ripgrep command
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" nerd tree
"let g:nerdtree_tabs_open_on_console_startup=1

" trim whitespace
fun! TrimWhitespace()
    let l:save_cursor = getpos('.')
    %s/\s\+$//e
    call setpos('.', l:save_cursor)
endfun

noremap <Leader>t :call TrimWhitespace()<CR>

" For local replace
nnoremap gr gdV%::s/<C-R>///gc<left><left><left>

" For global replace
nnoremap gR gD:%s/<C-R>///gc<left><left><left>

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_extensions = ['buffertag', 'tag', 'line', 'dir']

